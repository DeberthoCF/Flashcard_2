package com.example.flashcard_appnew

import android.graphics.Color
import android.os.Bundle
import android.view.View // ‚úÖ AJOUT√â pour pouvoir utiliser View.GONE / View.VISIBLE
import android.widget.ImageView // ‚úÖ AJOUT√â pour g√©rer l‚Äôic√¥ne
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    // Liste des questions et r√©ponses (la bonne r√©ponse est toujours en premi√®re position)
    private val questions = listOf(
        "Quelle est la capitale d'Ha√Øti ?" to listOf("Port-au-Prince", "Cap-Ha√Øtien", "Jacmel"),
        "Qui est le p√®re fondateur d'Ha√Øti ?" to listOf("Jean-Jacques Dessalines", "Henri Christophe", "Toussaint Louverture"),
        "En quelle ann√©e Ha√Øti a proclam√© son ind√©pendance ?" to listOf("1804", "1492", "1825"),
        "Quel est le plat national d'Ha√Øti ?" to listOf("Soup Joumou ü•£", "Riz coll√©", "Griot"),
        "Quelle est la devise d'Ha√Øti ?" to listOf("Libert√© ‚Äì √âgalit√© ‚Äì Fraternit√©", "Union fait la force", "Ind√©pendance ou la mort")
    )

    private var currentIndex = 0 // index de la question actuelle
    private var isShowingAnswers = true // ‚úÖ AJOUT√â : √©tat pour savoir si les r√©ponses sont visibles ou non

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val flashcardQuestion = findViewById<TextView>(R.id.flashcard_question)
        val answer1 = findViewById<TextView>(R.id.answer1)
        val answer2 = findViewById<TextView>(R.id.answer2)
        val answer3 = findViewById<TextView>(R.id.answer3)

        // ‚úÖ AJOUT√â : r√©cup√©rer l‚Äôic√¥ne "≈ìil"
        val toggleButton = findViewById<ImageView>(R.id.toggle_choices_visibility)

        // Liste pour g√©rer facilement les r√©ponses
        val answersViews = listOf(answer1, answer2, answer3)

        fun loadQuestion() {
            val (question, answers) = questions[currentIndex]
            flashcardQuestion.text = question

            // M√©langer l‚Äôordre des r√©ponses
            val shuffledAnswers = answers.shuffled()

            // Assigner les r√©ponses
            for (i in answersViews.indices) {
                answersViews[i].text = shuffledAnswers[i]
                answersViews[i].setBackgroundResource(R.drawable.background_answer)
                answersViews[i].setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0)
                answersViews[i].isClickable = true
                answersViews[i].visibility = if (isShowingAnswers) View.VISIBLE else View.GONE // ‚úÖ AJOUT√â pour respecter l‚Äô√©tat actuel
            }

            // Identifier la bonne r√©ponse
            val correctAnswer = answers[0]

            // G√©rer les clics
            for (answerView in answersViews) {
                answerView.setOnClickListener {
                    if (answerView.text == correctAnswer) {
                        answerView.setBackgroundColor(Color.GREEN) // Bonne r√©ponse
                    } else {
                        answerView.setBackgroundColor(Color.RED)   // Mauvaise r√©ponse
                        // Montrer la bonne en vert
                        answersViews.first { it.text == correctAnswer }
                            .setBackgroundColor(Color.GREEN)
                    }

                    // Emp√™cher de recliquer
                    answersViews.forEach { it.isClickable = false }

                    // Passer √† la prochaine question apr√®s 1.5 sec
                    answerView.postDelayed({
                        currentIndex = (currentIndex + 1) % questions.size
                        loadQuestion()
                    }, 1500)
                }
            }
        }

        // ‚úÖ AJOUT√â : logique du bouton ≈ìil
        toggleButton.setOnClickListener {
            if (isShowingAnswers) {
                // Cacher les r√©ponses
                answersViews.forEach { it.visibility = View.GONE }
                toggleButton.setImageResource(R.drawable.hide_icon) // changer ic√¥ne
            } else {
                // Montrer les r√©ponses
                answersViews.forEach { it.visibility = View.VISIBLE }
                toggleButton.setImageResource(R.drawable.show_icon)
            }
            isShowingAnswers = !isShowingAnswers
        }

        // Charger la 1√®re question
        loadQuestion()
    }
}
